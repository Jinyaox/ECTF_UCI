#!/usr/bin/python3 -u

# @file pair_tool
# @author Kenta, Yiran Wang
# @brief host tool for pairing a new key fob
# @date 2023

import json
import socket
import argparse

# @brief Function to send commands to pair
# a new fob.
# @param unpairmed_fob_bridge, bridged serial connection to unpairmed fob
# @param pairmed_fob_bridge, bridged serial connection to pairmed fob
# @param pair_pin, pin used to pair a new fob
def pair(unpaired_fob_bridge, paired_fob_bridge):

    # Connect to both sockets for serial
    unpaired_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    unpaired_sock.connect(("ectf-net", int(unpaired_fob_bridge)))

    paired_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    paired_sock.connect(("ectf-net", int(paired_fob_bridge)))

    # Send pair commands to both fobs
    unpaired_sock.send(b"pair\n")
    paired_sock.send(b"pair\n")

    # Set timeout for if pairing fails
    unpaired_sock.settimeout(5)
    
    # Try to receive data - if failed, pairing failed
    try:
        pair_success = unpaired_sock.recv(6)
        while len(pair_success) != 6:
            pair_success += unpaired_sock.recv(6 - len(pair_success))

        print(pair_success)

    except socket.timeout:
        print("Failed to pair fob")

    return 0


# @brief Main function
#
# Main function handles parsing arguments and passing them to pair
# function.
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--unpaired-fob-bridge",
        help="Bridge for the unpaired fob",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--paired-fob-bridge",
        help="Bridge for the paired fob",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--pair-pin", help="Program PIN", type=str, required=True,
    )

    args = parser.parse_args()

    with open('../secret/car_secrets.json', 'r') as f:
        pin_dict = json.load(f)
    
    if hash(args.pair_pin) in set(pin_dict.values()):
        pair(args.unpaired_fob_bridge,args.paired_fob_bridge)
    else:
        print("failed pairing")


if __name__ == "__main__":
    # stub for testing below (uncomment them for running)
    # dictionary = {
    #     '123':hash('15245')
    # }
    # json_object = json.dumps(dictionary, indent=4)
 
    # with open("car_secrets.json", "w") as outfile:
    #     outfile.write(json_object)
    main()
